apiVersion: v1
kind: Service
metadata:
  name: powerai-service
  namespace: powerai
  labels:
    app: tf-notebook-powerai
spec:
  ports:
  - name: ssh
    protocol: TCP
    port: 22
    targetPort: 22
  - name: jupyter
    protocol: TCP
    port: 8888
    targetPort: 8888
  - name: tensorboard
    protocol: TCP
    port: 6006
    targetPort: 6006
  selector:
    app: tf-notebook-powerai
  clusterIP: 
  type: LoadBalancer
  sessionAffinity: None
  externalTrafficPolicy: Cluster
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: powerai
spec:
  accessModes:
  - ReadOnlyMany
  capacity:
    storage: 2000Gi
  nfs:
    path: /mnt/datasets/standard-datasets
    server: 172.23.19.126
  persistentVolumeReclaimPolicy: Retain
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","kind":"PersistentVolumeClaim","metadata":{"annotations":{"volume.beta.kubernetes.io/storage-class":""},"labels":{"type":"dlaas-static-volume"},   "name":"static-volume-1","namespace":"ffdl"},"spec":{"accessModes":["ReadWriteMany"],"resources":{"requests":{"storage":"200Gi"}}}}
    pv.kubernetes.io/bind-completed: "yes"
    pv.kubernetes.io/bound-by-controller: "yes"
    volume.beta.kubernetes.io/storage-class: ""
  finalizers:
  - kubernetes.io/pvc-protection
  labels:
    type: shared
  name: shared-datasets-pvc
  namespace: powerai
spec:
  accessModes:
  - ReadOnlyMany
  resources:
    requests:
      storage: 2000Gi
  volumeName: powerai
status:
  accessModes:
  - ReadOnlyMany
  capacity:
    storage: 2000Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: powerai-pv-claim
  namespace: powerai
  labels:
    app: jupyter
  annotations:
    storageClass: nfs-client
  finalizers:
  - kubernetes.io/pvc-protection
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 250Gi
  storageClassName: nfs-client
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tf-notebook-powerai
  namespace: powerai
  labels:
    app: tf-notebook-powerai
  annotations:
    deployment.kubernetes.io/revision: '3'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tf-notebook-powerai
  template:
    metadata:
      labels:
        app: tf-notebook-powerai
    spec:
      volumes:
      - name: work
        emptyDir: {}
      - name: jupyter-persistent-storage
        persistentVolumeClaim:
          claimName: powerai-pv-claim
      - name: shared-datasets
        persistentVolumeClaim:
          claimName: shared-datasets-pvc
      containers:
      - name: tf-notebook-powerai
        image: mycluster.icp:8500/powerai/powerai-jupyter:1.5.4-all-ubuntu18.04-py3 
        env:
        - name: PASSWORD
          value: "sha1:b8fdd05ca4fd:ad4c757ca8132a4c51fb584f9e0c4aa08523b0b3"
        - name: SSH_KEY
          value: "ssh-rsa <key here>" 
        ports:
        - name: jupyter
          containerPort: 8888
          protocol: TCP
        - name: tensorboard
          containerPort: 6006
          protocol: TCP
        - name: ssh
          containerPort: 22
          protocol: TCP
        resources:
          limits:
            nvidia.com/gpu: '1'
        volumeMounts:
        - name: work
          mountPath: "/notebooks"
        - name: jupyter-persistent-storage
          mountPath: "/notebooks/datasets"
        - name: shared-datasets
          mountPath: "/notebooks/shared-datasets"
        terminationMessagePath: "/dev/termination-log"
        terminationMessagePolicy: File
        imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      nodeSelector:
        gputype: nvidia-tesla-p100-16gb
      securityContext: {}
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600 
